{:AddInfluence=>
  #<Set: {["player(String)",
    "influence(String)",
    "limit_per_country(Fixnum)",
    "countries(Array)",
    "total_influence(Fixnum)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "total_countries(Fixnum)",
    "limit_per_country(Proc)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "limit_per_country(NilClass)"],
   ["player(String)",
    "influence(String)",
    "countries(Proc)",
    "limit_per_country(Fixnum)",
    "total_influence(Fixnum)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "total_influence(Fixnum)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "limit_per_country(Fixnum)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "limit_per_country(Fixnum)",
    "total_influence(Fixnum)"],
   ["player(Proc)",
    "influence(Proc)",
    "countries(Array)",
    "limit_per_country(Fixnum)",
    "total_countries(Fixnum)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "limit_per_country(Fixnum)",
    "total_influence(Proc)"]}>,
 :RemoveInfluence=>
  #<Set: {["player(String)",
    "influence(String)",
    "countries(Proc)",
    "limit_per_country(Proc)",
    "total_countries(Fixnum)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "limit_per_country(Fixnum)",
    "total_influence(Fixnum)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "limit_per_country(Fixnum)",
    "total_countries(Fixnum)",
    "phase(Array)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "limit_per_country(Proc)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "total_influence(Proc)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "total_influence(Fixnum)"],
   ["player(String)",
    "influence(String)",
    "countries(Array)",
    "limit_per_country(Fixnum)"]}>,
 :PreventedBy=>
  #<Set: {nil,
   ["#<Set:0x007ffa5c10e0b0>(NilClass)", "#<Set:0x007ffa5c170dc8>(NilClass)"],
   ["#<Set:0x007ffa5c19afd8>(NilClass)",
    "#<Set:0x007ffa5c10e0b0>(NilClass)"]}>,
 :AnyTwo=>
  #<Set: {["#<Set:0x007ffa5c1704b8>(NilClass)",
    "#<Set:0x007ffa5c1704b8>(NilClass)",
    "#<Set:0x007ffa5c1704b8>(NilClass)",
    "#<Set:0x007ffa5c1704b8>(NilClass)",
    "#<Set:0x007ffa5c1704b8>(NilClass)",
    "#<Set:0x007ffa5c1704b8>(NilClass)",
    "#<Set:0x007ffa5c1704b8>(NilClass)",
    "#<Set:0x007ffa5c1704b8>(NilClass)"],
   []}>,
 :Requires=>
  #<Set: {nil,
   ["condition(Proc)"],
   ["(NilClass)"],
   ["#<Set:0x007ffa5c170dc8>(NilClass)"]}>,
 :AwardVictoryPoints=>
  #<Set: {["player(String)", "amount(Fixnum)"],
   ["player(String)", "amount(Proc)"],
   ["player(Proc)", "amount(Proc)"],
   ["player(String)", "amount(Fixnum)", "immediate(TrueClass)"],
   ["player(Proc)", "amount(Fixnum)"]}>,
 :AnyFour=>#<Set: {[]}>,
 :Cancels=>
  #<Set: {nil,
   ["#<Set:0x007ffa5c17b480>(NilClass)",
    "#<Set:0x007ffa5c10e0b0>(NilClass)",
    "#<Set:0x007ffa5c170dc8>(NilClass)"]}>,
 :War=>
  #<Set: {["ops(Fixnum)",
    "player(Proc)",
    "countries(Array)",
    "subtract(Proc)",
    "victory_rolls(Range)",
    "victory_vp(Fixnum)"],
   ["ops(Fixnum)",
    "player(Proc)",
    "countries(Proc)",
    "subtract(Proc)",
    "victory_rolls(Range)",
    "victory_vp(Fixnum)"],
   ["ops(Fixnum)",
    "player(String)",
    "countries(Array)",
    "subtract(Proc)",
    "victory_rolls(Range)",
    "victory_vp(Fixnum)"],
   ["player(Proc)",
    "ops(Fixnum)",
    "countries(Array)",
    "subtract(Proc)",
    "victory_rolls(Range)",
    "victory_vp(Fixnum)"],
   ["player(String)",
    "ops(Fixnum)",
    "countries(Array)",
    "subtract(Proc)",
    "victory_rolls(Range)",
    "victory_vp(Fixnum)"]}>,
 :FreeCoup=>
  #<Set: {["player(String)", "countries(Array)", "ops(Fixnum)"],
   ["player(Proc)", "countries(Array)", "ops(Fixnum)"]}>,
 :Noop=>#<Set: {nil}>,
 :Realignment=>#<Set: {nil}>,
 :ImproveDefcon=>
  #<Set: {["amount(Fixnum)"], ["player(Proc)", "amount(Fixnum)"]}>,
 :DegradeDefcon=>
  #<Set: {["amount(Fixnum)"], ["player(Proc)", "amount(Fixnum)"]}>,
 :AdvanceSpaceRace=>#<Set: {["amount(Fixnum)"], ["amount(Proc)"]}>,
 :ExpectMove=>
  #<Set: {["move(String)", "player(Proc)"],
   ["player(Proc)", "item(String)"],
   ["item(Proc)", "player(String)", "type(Array)"],
   ["item(Array)", "player(Proc)", "type(Symbol)"],
   ["move(String)", "value(Symbol)", "player(Proc)"],
   ["player(String)", "move(String)", "value(NilClass)"]}>,
 :AddMilitaryOps=>#<Set: {["player(Proc)", "amount(Fixnum)"]}>,
 :Discard=>
  #<Set: {["player(String)", "ops(Array)"],
   ["player(Proc)", "random(TrueClass)", "quantity(Proc)"],
   ["player(String)", "random(TrueClass)", "execute_event(Proc)"],
   ["player(Proc)",
    "side(Proc)",
    "execute_event(FalseClass)",
    "execute(Array)"],
   ["player(String)", "hand(String)", "quantity(Fixnum)"],
   ["card(Proc)"],
   ["card(Array)"]}>,
 :Challenge=>
  #<Set: {["player(String)", "task(Array)", "failure(Array)"],
   ["player(String)", "defer(Set)", "task(Array)", "failure(Array)"]}>,
 :ActionRound=>#<Set: {["player(String)"]}>,
 :CardPlay=>
  #<Set: {["player(String)", "played_for(Symbol)", "card(String)"],
   ["player(String)", "played_for(Array)", "card(Proc)"],
   ["player(String)", "max_ops(Fixnum)"]}>,
 :PickFromDiscard=>
  #<Set: {["player(String)", "ops(Array)", "execute_event(TrueClass)"],
   ["player(Proc)", "ops(Array)", "execute_event(FalseClass)"]}>,
 :AddModifier=>#<Set: {nil}>,
 :ScoreModifier=>
  #<Set: {["player(NilClass)",
    "type(Symbol)",
    "amount(Fixnum)",
    "cancel(String)"],
   ["player(String)",
    "type(Symbol)",
    "amount(Fixnum)",
    "max(Fixnum)",
    "cancel(String)"],
   ["player(Proc)",
    "type(Symbol)",
    "amount(Fixnum)",
    "mininum(Fixnum)",
    "cancel(String)"],
   ["player(Proc)",
    "type(Symbol)",
    "countries(Array)",
    "amount(Fixnum)",
    "cancel(String)"],
   ["player(String)",
    "type(Symbol)",
    "countries(Array)",
    "amount(Fixnum)",
    "cancel(String)"],
   ["player(String)", "type(Symbol)", "amount(Fixnum)", "cancel(String)"]}>,
 :ClaimChinaCard=>
  #<Set: {["player(String)", "playable(TrueClass)"],
   ["player(String)", "playable(FalseClass)"],
   ["player(Proc)", "playable(FalseClass)"]}>,
 :FreeMove=>
  #<Set: {["player(String)", "type(Array)", "ops(Fixnum)"],
   ["player(String)", "type(Symbol)", "ops(Fixnum)"],
   ["player(Proc)", "type(Symbol)", "ops(Fixnum)"]}>,
 :RevealHand=>#<Set: {["player(String)"]}>,
 :Modifier=>
  #<Set: {["on(Set)", "actions(Array)"],
   ["before(Set)", "cancel_challenge(Array)", "cancel_failure(Array)"],
   ["on(Set)", "triggers(Set)", "cancel(Array)"],
   ["on(Set)", "triggers(Set)", "cancel(Set)"],
   ["on(Set)", "triggers(Set)"],
   ["before(Set)", "triggers(Array)", "cancel(NilClass)"]}>,
 :DieRoll=>#<Set: {["player(String)", "value(Range)"]}>,
 :ActionRoundEnd=>#<Set: {["player(String)"]}>,
 :SetDefcon=>#<Set: {["amount(Fixnum)"]}>,
 :Coup=>#<Set: {nil}>,
 :LoseGame=>#<Set: {["player(Proc)"]}>,
 :Match=>
  #<Set: {["item(String)",
    "player(String)",
    "country(String)",
    "amount(Fixnum)"],
   ["item(String)"],
   ["item(Array)", "type(Symbol)"],
   nil,
   ["item(String)", "number(Fixnum)"],
   ["player(String)", "item(Array)", "countries(Proc)"],
   ["player(String)", "item(Array)", "countries(Array)"],
   ["item(String)", "player(String)"],
   ["item(String)", "regions(Array)"],
   ["player(String)", "item(String)", "type(Symbol)"],
   ["type(String)", "player(String)", "countries(Array)"],
   ["item(String)", "player(Proc)"],
   ["item(String)", "value(Symbol)", "player(Proc)"],
   ["player(String)", "item(String)", "value(NilClass)"],
   ["player(String)", "item(String)"]}>,
 :Modifiers=>#<Set: {["on(Set)", "triggers(Set)", "cancel(Array)"]}>,
 :Move=>
  #<Set: {["player(Proc)", "type(Array)", "ops(Fixnum)"],
   ["player(Proc)", "type(Array)", "countries(Array)", "ops(Fixnum)"]}>,
 :PermissionModifier=>
  #<Set: {["on(Set)", "ruling(Symbol)"],
   ["on(Set)", "cancel(Set)", "ruling(Symbol)"]}>,
 :ScoringModifier=>
  #<Set: {["on(Set)",
    "countries(Proc)",
    "battleground(TrueClass)",
    "cancel(Array)"],
   ["on(Set)", "battleground(FalseClass)", "cancel(Set)"]}>,
 :Score=>
  #<Set: {["region(String)",
    "presence(Fixnum)",
    "domination(Fixnum)",
    "control(Fixnum)",
    "battleground(Fixnum)",
    "superpower(Fixnum)"],
   ["region(String)",
    "presence(Fixnum)",
    "domination(Fixnum)",
    "control(Symbol)",
    "battleground(Fixnum)",
    "superpower(Fixnum)"],
   ["region(String)",
    "presence(Fixnum)",
    "domination(Fixnum)",
    "control(Fixnum)",
    "battleground(Fixnum)"]}>,
 :ScoreCountries=>#<Set: {["countries(Array)", "amount(Proc)"]}>,
 :RollDies=>
  #<Set: {["scoring(Proc)", "allow_ties(TrueClass)", "winner(Array)"],
   ["scoring(Proc)", "allow_ties(FalseClass)", "winner(Array)"]}>,
 :RelocateInfluence=>
  #<Set: {["player(String)",
    "influence(String)",
    "destination_countries(Proc)",
    "limit_per_country(Fixnum)",
    "total_influence(Fixnum)",
    "must_use_all_influence(FalseClass)"]}>,
 :ReplaceCards=>#<Set: {["player(String)"]}>,
 :TurnModifier=>
  #<Set: {["player(String)", "action_rounds(Fixnum)", "cancel(String)"]}>,
 :CancelEvent=>#<Set: {["player(String)", "discard(TrueClass)"]}>,
 :PickAndPlayFromHand=>
  #<Set: {["player(String)",
    "hand(String)",
    "random(TrueClass)",
    "select(Array)",
    "reject(Array)",
    "empty_hand(Array)"]}>,
 :ExchangeCard=>
  #<Set: {["player(Proc)", "execute_event(Proc)", "execute_ops(Proc)"]}>,
 :EndGame=>#<Set: {nil}>}

COUNTS
=====

[[:Match, 15],
 [:AddInfluence, 9],
 [:Discard, 7],
 [:RemoveInfluence, 7],
 [:Modifier, 6],
 [:ScoreModifier, 6],
 [:ExpectMove, 6],
 [:War, 5],
 [:AwardVictoryPoints, 5],
 [:Requires, 4],
 [:ClaimChinaCard, 3],
 [:CardPlay, 3],
 [:FreeMove, 3],
 [:PreventedBy, 3],
 [:Score, 3],
 [:ImproveDefcon, 2],
 [:Cancels, 2],
 [:FreeCoup, 2],
 [:AnyTwo, 2],
 [:DegradeDefcon, 2],
 [:AdvanceSpaceRace, 2],
 [:PickFromDiscard, 2],
 [:Move, 2],
 [:ScoringModifier, 2],
 [:RollDies, 2],
 [:PermissionModifier, 2],
 [:Challenge, 2],
 [:AddModifier, 1],
 [:ActionRound, 1],
 [:RevealHand, 1],
 [:RelocateInfluence, 1],
 [:AddMilitaryOps, 1],
 [:ReplaceCards, 1],
 [:ScoreCountries, 1],
 [:DieRoll, 1],
 [:ActionRoundEnd, 1],
 [:Realignment, 1],
 [:Noop, 1],
 [:SetDefcon, 1],
 [:TurnModifier, 1],
 [:Coup, 1],
 [:AnyFour, 1],
 [:CancelEvent, 1],
 [:PickAndPlayFromHand, 1],
 [:LoseGame, 1],
 [:Modifiers, 1],
 [:ExchangeCard, 1],
 [:EndGame, 1]]
